name: Build gallery slideshow
on:
  push:
    paths:
      - 'assets/gallery/**'
      - '.github/workflows/slideshow.yml'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Build slideshow with Pillow (Python)
        run: |
          python -m pip install --upgrade pip pillow
          python - <<'PY'
          import os, re, glob, pathlib
          from PIL import Image, ImageOps

          # collect images (natural sort)
          def key(s): return [int(t) if t.isdigit() else t.lower() for t in re.split(r'(\d+)', s)]
          files = sorted(
              glob.glob('assets/gallery/*.[Jj][Pp][Gg]') +
              glob.glob('assets/gallery/*.[Jj][Pp][Ee][Gg]') +
              glob.glob('assets/gallery/*.[Pp][Nn][Gg]'),
              key=key
          )
          if not files:
            raise SystemExit("No images found in assets/gallery")

          frames = []
          for f in files:
            im = Image.open(f).convert("RGBA")           # robust to png/jpg
            im = ImageOps.exif_transpose(im)             # auto-orient
            im.thumbnail((900, 900), Image.LANCZOS)      # keep aspect, cap size
            # palette GIF for small size
            pal = im.convert("RGB").quantize(colors=256, method=Image.MEDIANCUT)
            frames.append(pal)

          out = pathlib.Path("dist/gallery")
          out.mkdir(parents=True, exist_ok=True)
          duration_ms = 1200  # ~1.2s per slide
          frames[0].save(
              out / "slideshow.gif",
              save_all=True,
              append_images=frames[1:],
              loop=0,
              duration=duration_ms,
              optimize=True,
              disposal=2
          )
          print("Wrote", out / "slideshow.gif", "size:", (out / "slideshow.gif").stat().st_size, "bytes")
          PY

      - uses: crazy-max/ghaction-github-pages@v4
        if: ${{ hashFiles('dist/gallery/slideshow.gif') != '' }}
        with:
          target_branch: output
          build_dir: dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
